import { Directive, EventEmitter, HostListener, Input, Output, Injectable, Component, ViewChild, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { __awaiter } from 'tslib';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["input"];
const _c1 = function (a0) { return { "img-ul-disabled": a0 }; };
function ImageUploadComponent_label_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 7);
    ɵngcc0.ɵɵelement(1, "span", 8);
    ɵngcc0.ɵɵelementStart(2, "input", 9, 10);
    ɵngcc0.ɵɵlistener("change", function ImageUploadComponent_label_2_Template_input_change_2_listener() { ɵngcc0.ɵɵrestoreView(_r6); const _r4 = ɵngcc0.ɵɵreference(3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFileChange(_r4.files); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r0.style == null ? null : ctx_r0.style.selectButton)("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx_r0.disabled));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerText", ctx_r0.buttonCaption);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.disabled)("accept", ctx_r0.supportedExtensions);
} }
function ImageUploadComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function ImageUploadComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.deleteAll(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.disabled)("ngStyle", ctx_r1.style == null ? null : ctx_r1.style.clearButton)("innerText", ctx_r1.clearButtonCaption);
} }
function ImageUploadComponent_p_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p", 12);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerText", ctx_r2.fileTooLargeMessage);
} }
function ImageUploadComponent_div_6_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelement(1, "div", 19);
    ɵngcc0.ɵɵelementEnd();
} }
function ImageUploadComponent_div_6_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵlistener("click", function ImageUploadComponent_div_6_div_1_div_2_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r10 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.deleteFile(file_r10); });
    ɵngcc0.ɵɵelement(1, "span", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c1, ctx_r12.disabled));
} }
const _c2 = function (a0) { return { "background-image": a0 }; };
function ImageUploadComponent_div_6_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵlistener("click", function ImageUploadComponent_div_6_div_1_Template_div_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r17); const file_r10 = restoredCtx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.previewFileClicked(file_r10); });
    ɵngcc0.ɵɵtemplate(1, ImageUploadComponent_div_6_div_1_div_1_Template, 2, 0, "div", 16);
    ɵngcc0.ɵɵtemplate(2, ImageUploadComponent_div_6_div_1_div_2_Template, 2, 3, "div", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r10 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(3, _c2, "url(" + file_r10.src + ")"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", file_r10.pending);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !file_r10.pending);
} }
function ImageUploadComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵtemplate(1, ImageUploadComponent_div_6_div_1_Template, 3, 5, "div", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r3.style == null ? null : ctx_r3.style.previewPanel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.files);
} }
const _c3 = function (a0) { return { "img-ul-file-is-over": a0 }; };
class FileDropDirective {
    constructor() {
        this.fileOver = new EventEmitter();
        this.fileDrop = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    static getDataTransfer(event) {
        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;
    }
    /**
     * @param {?} types
     * @return {?}
     */
    static hasFiles(types) {
        if (!types) {
            return false;
        }
        if (types.indexOf) {
            return types.indexOf('Files') !== -1;
        }
        if (types.contains) {
            return types.contains('Files');
        }
        return false;
    }
    /**
     * @param {?} rule
     * @param {?} candidate
     * @return {?}
     */
    static matchRule(rule, candidate) {
        return new RegExp('^' + rule.split('*').join('.*') + '$').test(candidate);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        /** @type {?} */
        const dataTransfer = FileDropDirective.getDataTransfer(event);
        if (!FileDropDirective.hasFiles(dataTransfer.types)) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        const files = this.filterFiles(dataTransfer.files);
        event.preventDefault();
        this.fileOver.emit(false);
        this.fileDrop.emit(files);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        this.fileOver.emit(false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        /** @type {?} */
        const dataTransfer = FileDropDirective.getDataTransfer(event);
        if (!FileDropDirective.hasFiles(dataTransfer.types)) {
            return;
        }
        dataTransfer.dropEffect = 'copy';
        event.preventDefault();
        this.fileOver.emit(true);
    }
    /**
     * @param {?} files
     * @return {?}
     */
    filterFiles(files) {
        if (!this.accept || this.accept.length === 0) {
            return files;
        }
        /** @type {?} */
        const acceptedFiles = [];
        for (let i = 0; i < files.length; i++) {
            for (let j = 0; j < this.accept.length; j++) {
                if (FileDropDirective.matchRule(this.accept[j], files[i].type)) {
                    acceptedFiles.push(files[i]);
                    break;
                }
            }
        }
        return acceptedFiles;
    }
}
FileDropDirective.ɵfac = function FileDropDirective_Factory(t) { return new (t || FileDropDirective)(); };
FileDropDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FileDropDirective, selectors: [["", "fileDrop", ""]], hostBindings: function FileDropDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("drop", function FileDropDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); })("dragleave", function FileDropDirective_dragleave_HostBindingHandler($event) { return ctx.onDragLeave($event); })("dragover", function FileDropDirective_dragover_HostBindingHandler($event) { return ctx.onDragOver($event); });
    } }, inputs: { accept: "accept" }, outputs: { fileOver: "fileOver", fileDrop: "fileDrop" } });
FileDropDirective.propDecorators = {
    accept: [{ type: Input }],
    fileOver: [{ type: Output }],
    fileDrop: [{ type: Output }],
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],
    onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
    onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileDropDirective, [{
        type: Directive,
        args: [{
                selector: '[fileDrop]'
            }]
    }], function () { return []; }, { fileOver: [{
            type: Output
        }], fileDrop: [{
            type: Output
        }], 
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop: [{
            type: HostListener,
            args: ['drop', ['$event']]
        }], 
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave: [{
            type: HostListener,
            args: ['dragleave', ['$event']]
        }], 
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver: [{
            type: HostListener,
            args: ['dragover', ['$event']]
        }], accept: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ImageUploadService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} image
     * @param {?=} headers
     * @param {?=} partName
     * @param {?=} customFormData
     * @param {?=} withCredentials
     * @return {?}
     */
    uploadImage(url, image, headers, partName = 'image', customFormData, withCredentials) {
        if (!url || url === '') {
            throw new Error('Url is not set! Please set it before doing queries');
        }
        /** @type {?} */
        const formData = new FormData();
        if (customFormData) {
            for (const key of Object.keys(customFormData)) {
                formData.append(key, customFormData[key]);
            }
        }
        formData.append(partName, image);
        return this.http.post(url, formData, { withCredentials, headers, observe: 'response' });
    }
}
ImageUploadService.ɵfac = function ImageUploadService_Factory(t) { return new (t || ImageUploadService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
ImageUploadService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ImageUploadService, factory: ImageUploadService.ɵfac });
/** @nocollapse */
ImageUploadService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageUploadService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class FileHolder {
    /**
     * @param {?} src
     * @param {?} file
     */
    constructor(src, file) {
        this.src = src;
        this.file = file;
        this.pending = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ImageUploadComponent {
    /**
     * @param {?} imageService
     */
    constructor(imageService) {
        this.imageService = imageService;
        this.files = [];
        this.fileCounter = 0;
        this.fileOver = false;
        this.showFileTooLargeMessage = false;
        this.beforeUpload = metadata => metadata;
        this.buttonCaption = 'Select Images';
        this.disabled = false;
        this.cssClass = 'img-ul';
        this.clearButtonCaption = 'Clear';
        this.dropBoxMessage = 'Drop your images here!';
        this.max = 100;
        this.preview = true;
        this.withCredentials = false;
        this.uploadedFiles = [];
        this.removed = new EventEmitter();
        this.uploadStateChanged = new EventEmitter();
        this.uploadFinished = new EventEmitter();
        this.previewClicked = new EventEmitter();
        this.pendingFilesCounter = 0;
        this.onFileOver = (isOver) => this.fileOver = isOver;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.fileTooLargeMessage) {
            this.fileTooLargeMessage = 'An image was too large and was not uploaded.' + (this.maxFileSize ? (' The maximum file size is ' + this.maxFileSize / 1024) + 'KiB.' : '');
        }
        this.supportedExtensions = this.supportedExtensions ? this.supportedExtensions.map((ext) => 'image/' + ext) : ['image/*'];
    }
    /**
     * @return {?}
     */
    deleteAll() {
        this.files.forEach(f => this.removed.emit(f));
        this.files = [];
        this.fileCounter = 0;
        if (this.inputElement) {
            this.inputElement.nativeElement.value = '';
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    deleteFile(file) {
        /** @type {?} */
        const index = this.files.indexOf(file);
        this.files.splice(index, 1);
        this.fileCounter--;
        if (this.inputElement) {
            this.inputElement.nativeElement.value = '';
        }
        this.removed.emit(file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    previewFileClicked(file) {
        this.previewClicked.emit(file);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.uploadedFiles && changes.uploadedFiles.currentValue.length > 0) {
            this.processUploadedFiles();
        }
    }
    /**
     * @param {?} files
     * @return {?}
     */
    onFileChange(files) {
        if (this.disabled)
            return;
        /** @type {?} */
        const remainingSlots = this.max - this.fileCounter;
        /** @type {?} */
        const filesToUploadNum = files.length > remainingSlots ? remainingSlots : files.length;
        if (this.url && filesToUploadNum !== 0) {
            this.uploadStateChanged.emit(true);
        }
        this.fileCounter += filesToUploadNum;
        this.showFileTooLargeMessage = false;
        this.uploadFiles(files, filesToUploadNum);
    }
    /**
     * @param {?} response
     * @param {?} fileHolder
     * @return {?}
     */
    onResponse(response, fileHolder) {
        fileHolder.serverResponse = { status: response.status, response };
        fileHolder.pending = false;
        this.uploadFinished.emit(fileHolder);
        if (--this.pendingFilesCounter === 0) {
            this.uploadStateChanged.emit(false);
        }
    }
    /**
     * @return {?}
     */
    processUploadedFiles() {
        for (let i = 0; i < this.uploadedFiles.length; i++) {
            /** @type {?} */
            const data = this.uploadedFiles[i];
            /** @type {?} */
            let fileBlob;
            /** @type {?} */
            let file;
            /** @type {?} */
            let fileUrl;
            if (data instanceof Object) {
                fileUrl = data.url;
                fileBlob = (data.blob) ? data.blob : new Blob([data]);
                file = new File([fileBlob], data.fileName);
            }
            else {
                fileUrl = data;
                fileBlob = new Blob([fileUrl]);
                file = new File([fileBlob], fileUrl);
            }
            this.files.push(new FileHolder(fileUrl, file));
        }
    }
    /**
     * @param {?} files
     * @param {?} filesToUploadNum
     * @return {?}
     */
    uploadFiles(files, filesToUploadNum) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < filesToUploadNum; i++) {
                /** @type {?} */
                const file = files[i];
                if (this.maxFileSize && file.size > this.maxFileSize) {
                    this.fileCounter--;
                    this.inputElement.nativeElement.value = '';
                    this.showFileTooLargeMessage = true;
                    this.uploadStateChanged.emit(false);
                    continue;
                }
                /** @type {?} */
                const beforeUploadResult = yield this.beforeUpload({ file, url: this.url, abort: false });
                if (beforeUploadResult.abort) {
                    this.fileCounter--;
                    this.inputElement.nativeElement.value = '';
                    continue;
                }
                /** @type {?} */
                const img = (/** @type {?} */ (document.createElement('img')));
                img.src = window.URL.createObjectURL(beforeUploadResult.file);
                /** @type {?} */
                const reader = new FileReader();
                reader.addEventListener('load', (event) => {
                    /** @type {?} */
                    const fileHolder = new FileHolder(event.target.result, beforeUploadResult.file);
                    this.files.push(fileHolder);
                    this.uploadSingleFile(fileHolder, beforeUploadResult.url, beforeUploadResult.formData);
                }, false);
                reader.readAsDataURL(beforeUploadResult.file);
            }
        });
    }
    /**
     * @param {?} fileHolder
     * @param {?=} url
     * @param {?=} customForm
     * @return {?}
     */
    uploadSingleFile(fileHolder, url = this.url, customForm) {
        if (url) {
            this.pendingFilesCounter++;
            fileHolder.pending = true;
            this.imageService
                .uploadImage(url, fileHolder.file, this.headers, this.partName, customForm, this.withCredentials)
                .subscribe(response => this.onResponse(response, fileHolder), error => {
                this.onResponse(error, fileHolder);
                this.deleteFile(fileHolder);
            });
        }
        else {
            this.uploadFinished.emit(fileHolder);
        }
    }
}
ImageUploadComponent.ɵfac = function ImageUploadComponent_Factory(t) { return new (t || ImageUploadComponent)(ɵngcc0.ɵɵdirectiveInject(ImageUploadService)); };
ImageUploadComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ImageUploadComponent, selectors: [["image-upload"]], viewQuery: function ImageUploadComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, inputs: { beforeUpload: "beforeUpload", buttonCaption: "buttonCaption", disabled: "disabled", cssClass: ["class", "cssClass"], clearButtonCaption: "clearButtonCaption", dropBoxMessage: "dropBoxMessage", max: "max", preview: "preview", withCredentials: "withCredentials", uploadedFiles: "uploadedFiles", fileTooLargeMessage: "fileTooLargeMessage", supportedExtensions: ["extensions", "supportedExtensions"], headers: "headers", maxFileSize: "maxFileSize", partName: "partName", style: "style", url: "url" }, outputs: { removed: "removed", uploadStateChanged: "uploadStateChanged", uploadFinished: "uploadFinished", previewClicked: "previewClicked" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 7, vars: 11, consts: [["fileDrop", "", 3, "accept", "ngClass", "ngStyle", "fileOver", "fileDrop"], [1, "img-ul-file-upload", "img-ul-hr-inline-group"], ["class", "img-ul-upload img-ul-button", 3, "ngStyle", "ngClass", 4, "ngIf"], ["class", "img-ul-clear img-ul-button", 3, "disabled", "ngStyle", "innerText", "click", 4, "ngIf"], [1, "img-ul-drag-box-msg", 3, "innerText"], ["class", "img-ul-file-too-large", 3, "innerText", 4, "ngIf"], ["class", "img-ul-container img-ul-hr-inline-group", 3, "ngStyle", 4, "ngIf"], [1, "img-ul-upload", "img-ul-button", 3, "ngStyle", "ngClass"], [3, "innerText"], ["type", "file", "multiple", "", 3, "disabled", "accept", "change"], ["input", ""], [1, "img-ul-clear", "img-ul-button", 3, "disabled", "ngStyle", "innerText", "click"], [1, "img-ul-file-too-large", 3, "innerText"], [1, "img-ul-container", "img-ul-hr-inline-group", 3, "ngStyle"], ["class", "img-ul-image", 3, "ngStyle", "click", 4, "ngFor", "ngForOf"], [1, "img-ul-image", 3, "ngStyle", "click"], ["class", "img-ul-loading-overlay", 4, "ngIf"], ["class", "img-ul-x-mark", 3, "ngClass", "click", 4, "ngIf"], [1, "img-ul-loading-overlay"], [1, "img-ul-spinning-circle"], [1, "img-ul-x-mark", 3, "ngClass", "click"], [1, "img-ul-close"]], template: function ImageUploadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("fileOver", function ImageUploadComponent_Template_div_fileOver_0_listener($event) { return ctx.onFileOver($event); })("fileDrop", function ImageUploadComponent_Template_div_fileDrop_0_listener($event) { return ctx.onFileChange($event); });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ImageUploadComponent_label_2_Template, 4, 7, "label", 2);
        ɵngcc0.ɵɵtemplate(3, ImageUploadComponent_button_3_Template, 1, 3, "button", 3);
        ɵngcc0.ɵɵelement(4, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, ImageUploadComponent_p_5_Template, 1, 1, "p", 5);
        ɵngcc0.ɵɵtemplate(6, ImageUploadComponent_div_6_Template, 2, 2, "div", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("accept", ctx.supportedExtensions)("ngClass", ctx.cssClass)("ngClass", ɵngcc0.ɵɵpureFunction1(9, _c3, ctx.fileOver))("ngStyle", ctx.style == null ? null : ctx.style.layout);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileCounter != ctx.max);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileCounter > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerText", ctx.dropBoxMessage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showFileTooLargeMessage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.preview);
    } }, directives: [FileDropDirective, ɵngcc2.NgClass, ɵngcc2.NgStyle, ɵngcc2.NgIf, ɵngcc2.NgForOf], styles: [".img-ul[_ngcontent-%COMP%]{--active-color:#3C9;--common-radius:3px;background-color:#f8f8f8;border-radius:var(--common-radius);border:1px dashed #d0d0d0;font-family:sans-serif;position:relative;color:#9b9b9b}.img-ul-file-is-over[_ngcontent-%COMP%]{border:var(--active-color) solid}.img-ul-hr-inline-group[_ngcontent-%COMP%]:after{clear:both;content:\"\";display:table}.img-ul-file-upload[_ngcontent-%COMP%]{padding:16px}.img-ul-drag-box-msg[_ngcontent-%COMP%]{display:inline-block;font-weight:600;margin-left:12px;padding-top:14px}label.img-ul-button[_ngcontent-%COMP%]   input[type=file][_ngcontent-%COMP%]{display:none;position:fixed;top:-99999px}.img-ul-clear[_ngcontent-%COMP%]{background-color:red}.img-ul-clear[_ngcontent-%COMP%]:disabled{background-color:#ff6464;cursor:default}.img-ul-upload[_ngcontent-%COMP%]{background-color:var(--active-color)}.img-ul-button[_ngcontent-%COMP%]{-moz-box-shadow:2px 2px 4px 0 rgba(148,148,148,.6);-webkit-box-shadow:2px 2px 4px 0 rgba(148,148,148,.6);border:none;box-shadow:2px 2px 4px 0 rgba(148,148,148,.6);color:#fff;cursor:pointer;display:inline-block;float:left;font-size:1.25em;font-weight:500;padding:10px;text-transform:uppercase}.img-ul-button[_ngcontent-%COMP%]:active   span[_ngcontent-%COMP%]{display:block;position:relative;top:1px}.img-ul-container[_ngcontent-%COMP%]{background-color:#fdfdfd;padding:0 10px}.img-ul-image[_ngcontent-%COMP%]{background:center center/contain no-repeat;display:inline-block;float:left;height:86px;margin:6px;position:relative;width:86px}.img-ul-x-mark[_ngcontent-%COMP%]{background-color:#000;border-radius:2px;color:#fff;cursor:pointer;float:right;height:20px;margin:2px;opacity:.7;text-align:center;width:20px}.img-ul-close[_ngcontent-%COMP%]{height:20px;opacity:.7;padding-right:3px;position:relative;width:20px}.img-ul-x-mark[_ngcontent-%COMP%]:hover   .img-ul-close[_ngcontent-%COMP%]{opacity:1}.img-ul-close[_ngcontent-%COMP%]:after, .img-ul-close[_ngcontent-%COMP%]:before{background-color:#fff;border-radius:2px;content:'';height:15px;position:absolute;top:0;width:2px}.img-ul-close[_ngcontent-%COMP%]:before{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.img-ul-close[_ngcontent-%COMP%]:after{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.img-ul-x-mark.img-ul-disabled[_ngcontent-%COMP%]{display:none}.img-ul-loading-overlay[_ngcontent-%COMP%]{background-color:#000;bottom:0;left:0;opacity:.7;position:absolute;right:0;top:0}.img-ul-spinning-circle[_ngcontent-%COMP%]{height:30px;width:30px;margin:auto;position:absolute;top:0;left:0;bottom:0;right:0;border-radius:50%;border:3px solid rgba(255,255,255,0);border-top:3px solid #fff;border-right:3px solid #fff;-webkit-animation:2s cubic-bezier(.085,.625,.855,.36) infinite spinner;animation:2s cubic-bezier(.085,.625,.855,.36) infinite spinner}.img-ul-file-too-large[_ngcontent-%COMP%]{color:red;padding:0 15px}.img-ul-upload.img-ul-disabled[_ngcontent-%COMP%]{background-color:#86e9c9;cursor:default}.img-ul-upload.img-ul-disabled[_ngcontent-%COMP%]:active   span[_ngcontent-%COMP%]{top:0}@-webkit-keyframes spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"] });
/** @nocollapse */
ImageUploadComponent.ctorParameters = () => [
    { type: ImageUploadService }
];
ImageUploadComponent.propDecorators = {
    beforeUpload: [{ type: Input }],
    buttonCaption: [{ type: Input }],
    disabled: [{ type: Input }],
    cssClass: [{ type: Input, args: ['class',] }],
    clearButtonCaption: [{ type: Input }],
    dropBoxMessage: [{ type: Input }],
    fileTooLargeMessage: [{ type: Input }],
    headers: [{ type: Input }],
    max: [{ type: Input }],
    maxFileSize: [{ type: Input }],
    preview: [{ type: Input }],
    partName: [{ type: Input }],
    style: [{ type: Input }],
    supportedExtensions: [{ type: Input, args: ['extensions',] }],
    url: [{ type: Input }],
    withCredentials: [{ type: Input }],
    uploadedFiles: [{ type: Input }],
    removed: [{ type: Output }],
    uploadStateChanged: [{ type: Output }],
    uploadFinished: [{ type: Output }],
    previewClicked: [{ type: Output }],
    inputElement: [{ type: ViewChild, args: ['input',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageUploadComponent, [{
        type: Component,
        args: [{
                selector: 'image-upload',
                template: "<div\n     fileDrop\n     [accept]=\"supportedExtensions\"\n     (fileOver)=\"onFileOver($event)\"\n     (fileDrop)=\"onFileChange($event)\"\n     [ngClass]=\"cssClass\"\n     [ngClass]=\"{'img-ul-file-is-over': fileOver}\"     \n     [ngStyle]=\"style?.layout\"\n>\n  <div class=\"img-ul-file-upload img-ul-hr-inline-group\">    \n    <label *ngIf=\"fileCounter != max\"\n      class=\"img-ul-upload img-ul-button\" \n      [ngStyle]=\"style?.selectButton\"\n      [ngClass]=\"{'img-ul-disabled': disabled}\">\n      <span [innerText]=\"buttonCaption\"></span>\n      <input\n        type=\"file\"\n        [disabled]=\"disabled\"\n        [accept]=\"supportedExtensions\"\n        multiple (change)=\"onFileChange(input.files)\"\n        #input>\n    </label>\n    <button *ngIf=\"fileCounter > 0\"\n      [disabled]=\"disabled\"\n      class=\"img-ul-clear img-ul-button\" \n      (click)=\"deleteAll()\" \n      [ngStyle]=\"style?.clearButton\"\n      [innerText]=\"clearButtonCaption\">\n    </button>\n    <div class=\"img-ul-drag-box-msg\" [innerText]=\"dropBoxMessage\"></div>\n  </div>\n\n  <p class=\"img-ul-file-too-large\" *ngIf=\"showFileTooLargeMessage\" [innerText]=\"fileTooLargeMessage\"></p>\n\n  <div *ngIf=\"preview\" class=\"img-ul-container img-ul-hr-inline-group\" [ngStyle]=\"style?.previewPanel\">\n    <div\n      class=\"img-ul-image\"\n      *ngFor=\"let file of files\"\n      (click)=\"previewFileClicked(file)\"\n      [ngStyle]=\"{'background-image': 'url('+ file.src +')'}\"\n    >\n      <div *ngIf=\"file.pending\" class=\"img-ul-loading-overlay\">\n        <div class=\"img-ul-spinning-circle\"></div>\n      </div>\n      <div *ngIf=\"!file.pending\" \n        [ngClass]=\"{'img-ul-disabled': disabled}\" \n        class=\"img-ul-x-mark\" \n        (click)=\"deleteFile(file)\">\n        <span class=\"img-ul-close\"></span>\n      </div>\n    </div>\n  </div>\n</div>",
                styles: [".img-ul{--active-color:#3C9;--common-radius:3px;background-color:#f8f8f8;border-radius:var(--common-radius);border:1px dashed #d0d0d0;font-family:sans-serif;position:relative;color:#9b9b9b}.img-ul-file-is-over{border:var(--active-color) solid}.img-ul-hr-inline-group:after{clear:both;content:\"\";display:table}.img-ul-file-upload{padding:16px}.img-ul-drag-box-msg{display:inline-block;font-weight:600;margin-left:12px;padding-top:14px}label.img-ul-button input[type=file]{display:none;position:fixed;top:-99999px}.img-ul-clear{background-color:red}.img-ul-clear:disabled{background-color:#ff6464;cursor:default}.img-ul-upload{background-color:var(--active-color)}.img-ul-button{-moz-box-shadow:2px 2px 4px 0 rgba(148,148,148,.6);-webkit-box-shadow:2px 2px 4px 0 rgba(148,148,148,.6);border:none;box-shadow:2px 2px 4px 0 rgba(148,148,148,.6);color:#fff;cursor:pointer;display:inline-block;float:left;font-size:1.25em;font-weight:500;padding:10px;text-transform:uppercase}.img-ul-button:active span{display:block;position:relative;top:1px}.img-ul-container{background-color:#fdfdfd;padding:0 10px}.img-ul-image{background:center center/contain no-repeat;display:inline-block;float:left;height:86px;margin:6px;position:relative;width:86px}.img-ul-x-mark{background-color:#000;border-radius:2px;color:#fff;cursor:pointer;float:right;height:20px;margin:2px;opacity:.7;text-align:center;width:20px}.img-ul-close{height:20px;opacity:.7;padding-right:3px;position:relative;width:20px}.img-ul-x-mark:hover .img-ul-close{opacity:1}.img-ul-close:after,.img-ul-close:before{background-color:#fff;border-radius:2px;content:'';height:15px;position:absolute;top:0;width:2px}.img-ul-close:before{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.img-ul-close:after{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.img-ul-x-mark.img-ul-disabled{display:none}.img-ul-loading-overlay{background-color:#000;bottom:0;left:0;opacity:.7;position:absolute;right:0;top:0}.img-ul-spinning-circle{height:30px;width:30px;margin:auto;position:absolute;top:0;left:0;bottom:0;right:0;border-radius:50%;border:3px solid rgba(255,255,255,0);border-top:3px solid #fff;border-right:3px solid #fff;-webkit-animation:2s cubic-bezier(.085,.625,.855,.36) infinite spinner;animation:2s cubic-bezier(.085,.625,.855,.36) infinite spinner}.img-ul-file-too-large{color:red;padding:0 15px}.img-ul-upload.img-ul-disabled{background-color:#86e9c9;cursor:default}.img-ul-upload.img-ul-disabled:active span{top:0}@-webkit-keyframes spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"]
            }]
    }], function () { return [{ type: ImageUploadService }]; }, { beforeUpload: [{
            type: Input
        }], buttonCaption: [{
            type: Input
        }], disabled: [{
            type: Input
        }], cssClass: [{
            type: Input,
            args: ['class']
        }], clearButtonCaption: [{
            type: Input
        }], dropBoxMessage: [{
            type: Input
        }], max: [{
            type: Input
        }], preview: [{
            type: Input
        }], withCredentials: [{
            type: Input
        }], uploadedFiles: [{
            type: Input
        }], removed: [{
            type: Output
        }], uploadStateChanged: [{
            type: Output
        }], uploadFinished: [{
            type: Output
        }], previewClicked: [{
            type: Output
        }], fileTooLargeMessage: [{
            type: Input
        }], supportedExtensions: [{
            type: Input,
            args: ['extensions']
        }], headers: [{
            type: Input
        }], maxFileSize: [{
            type: Input
        }], partName: [{
            type: Input
        }], style: [{
            type: Input
        }], url: [{
            type: Input
        }], inputElement: [{
            type: ViewChild,
            args: ['input']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ImageUploadModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: ImageUploadModule,
            providers: [ImageUploadService]
        };
    }
}
ImageUploadModule.ɵfac = function ImageUploadModule_Factory(t) { return new (t || ImageUploadModule)(); };
ImageUploadModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ImageUploadModule });
ImageUploadModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageUploadModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    ImageUploadComponent,
                    FileDropDirective
                ],
                exports: [ImageUploadComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImageUploadModule, { declarations: function () { return [ImageUploadComponent, FileDropDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ImageUploadComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { ImageUploadModule, ImageUploadComponent, FileHolder, FileDropDirective as ɵb, ImageUploadService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,